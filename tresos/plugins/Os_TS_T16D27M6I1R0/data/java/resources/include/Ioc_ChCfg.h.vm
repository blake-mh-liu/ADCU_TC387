#parse("CommonVars.vm")
/* This file is generated automatically. DO NOT EDIT!!
 * 
 * EB tresos AutoCore OS ${Version.getMajor()}.${Version.getMinor()}.${Version.getPatch()} ${Version.getTarget()}/${Version.getDerivate()}
 * (Build ${Version.getBuild()})
 * 
 * (c) 1998-${Version.getCurrentYear()} Elektrobit Automotive GmbH
 * Am Wolfsmantel 46
 * 91058 Erlangen
 * GERMANY
 * 
 * Date         : ${Version.getDate()}           !!!IGNORE-LINE!!!
 */

#ifndef IOC_CHCFG_H
\#define IOC_CHCFG_H
#ifdef __cplusplus
extern "C" {
#endif

/*
 * MISRA-C:2012 Deviation List
 *
 * MISRAC2012-1) Deviated Rule: 5.1 (required)
 * External identifiers shall be unique.
 *
 * Reason:
 * These identifiers depend on the channel names chosen by the user.
 *
 * MISRAC2012-2) Deviated Rule: 8.6 (required)
 * An identifier with external linkage shall have exactly one
 * external definition.
 *
 * Reason:
 * False positive.
 * There are generated C files for each channel, which define these symbols.
 *
 * MISRAC2012-3) Deviated Rule: 20.1 (advisory)
 * \#include directives should only be preceded by preprocessor directives
 * or comments.
 *
 * Reason:
 * The C++ guards allow usage of the OS with a C++-compiler.
 *
 * MISRAC2012-4) Deviated Rule: 11.9 (required)
 * The macro NULL shall be the only permitted form of integer null pointer constant.
 *
 * Reason:
 * The macro IOC_OFFSETOF uses the literal constant 0 as a pointer to an imaginary object
 * with structure type, which allows to determine the offset of one of its fields.
 * The value 0 is necessary to make this offset relative to the start address of an
 * object with that structure type. Furthermore, the null pointer is never dereferenced
 * in the calculation.
 */

/* Deviation MISRAC2012-1, MISRAC2012-2, MISRAC2012-3 <*> */

\#include <private/Ioc_tool.h>
\#include <private/Ioc_configinterface.h>
\#include <Ioc_BufferTypes.h>
#if( $OsModel.isMicroKernel() )
#* *#\#include <Mk_gen_config.h>
#* *#\#include <Mk_gen_user.h>
#else
#* *#\#include <Os_config.h>
#end
#foreach( $includeFileName in $IocCommsList.getDataTypeIncludes() )
#* *#\#include <$includeFileName>
#end

\#define IOC_CFG_NCHANNELS  $IocCommsList.getIocNumChannels()

/*===================================================================
 * Channel Buffers Receivers
 *==================================================================*/
#foreach( $comm in $IocCommsList )
#* *##if( $comm.isQueued() )
#*    *#extern ioc_state_t Ioc_$comm.getChannelName()_State_Receiver;
#* *##end
#end

/*===================================================================
 * Channel Buffers Senders
 *==================================================================*/
#foreach( $comm in $IocCommsList )
#* *#extern Ioc_${comm.getChannelName()}_t Ioc_${comm.getChannelName()}_Buffer[$comm.getQueueSize()];
#* *#extern ioc_state_t Ioc_$comm.getChannelName()_State_Sender;
#* *##if( $comm.isPlatformSpecificLockUsed() )
#* *##* *#extern $comm.getPlatformInterLockType() Ioc_$comm.getChannelName()_lock;
#* *##end
#* *##if( $comm.hasInitData() )
#* *##* *#extern const $comm.getDataTypeList().get(0) $comm.getInitDataName();
#* *##end
#* *#
#end

/*===================================================================
 * Channel Configurations
 *==================================================================*/
#foreach( $comm in $IocCommsList )
#* *#extern const ioc_uint32_t Ioc_${comm.getName()}_dataElemOffsets[$comm.getIocDataTypeList().size()];
#* *#extern const ioc_ilength_t Ioc_${comm.getName()}_dataElemLengths[$comm.getIocDataTypeList().size()];
#* *#
#end

/*===================================================================
 * Channel Initializers
 *==================================================================*/
#foreach( $comm in $IocCommsList )
#* *#\#define Ioc_${comm.getName()}_READER_END {  \
#* *#  /* trapping */                   IOC_FALSE,  \
#* *#  /* accessors */                  0x$ClassOfHelpers.toHexString($comm.getReceiversAccessPermissions()),  \
#* *##if($comm.isQueued())
#* *#  /* state */                      &Ioc_${comm.getChannelName()}_State_Receiver  \
#* *##else
#* *#  /* state */                      IOC_NULL   \
#* *##end
#* *#}
#* *#\#define Ioc_${comm.getName()}_WRITER_END {  \
#* *##if( $comm.isSenderTrapping() )
#* *#  /* trapping */                   IOC_TRUE,  \
#* *##else
#* *#  /* trapping */                   IOC_FALSE,  \
#* *##end
#* *#  /* accessors */                  0x$ClassOfHelpers.toHexString($comm.getSendersAccessPermissions()),  \
#* *#  /* state */                      &Ioc_${comm.getChannelName()}_State_Sender   \
#* *#}
## !LINKSTO Generator.Output.Ioc_ChCfg_h.Cfg, 1
#* *#/* Configuration for IOC channel with ID: $IocCommsList.getId($comm), Name: $comm.getChannelName() */
#* *#\#define Ioc_${comm.getChannelName()}_CFG {  \
#* *#  /* buffer */                     Ioc_${comm.getName()}_Buffer,  \
#* *#  /* bufferSize */                 $comm.getBufferSize(),  \
#* *#  /* readerConfig */               Ioc_${comm.getName()}_READER_END,  \
#* *#  /* writerConfig */               Ioc_${comm.getName()}_WRITER_END,  \
#* *#  /* writerLockTypeLocalCore */    $comm.getIntraLockType(),  \
#* *#  /* writerLockLocalCore */        $comm.getIntraLock(),  \
#* *#  /* writerLockTypeCrossCore */    $comm.getInterLockType(),  \
#* *#  /* writerLockCrossCore */        $comm.getSpinLock(),  \
#* *#  /* dataElemLengths */            Ioc_${comm.getName()}_dataElemLengths,  \
#* *#  /* dataElemOffsets */            Ioc_${comm.getName()}_dataElemOffsets,  \
#* *#  /* numQueueEntries */            $comm.getQueueSize(),  \
#* *#  /* commSemantics */              $comm.getCommSemantics(),  \
#* *#  /* numDataElements */            $comm.getIocDataTypeList().size(),  \
#* *##if( $comm.hasInitData() )
#* *#  /* initData */                   (&$comm.getInitDataName())  \
#* *##else
#* *#  /* initData */                   IOC_NULL                      \
#* *##end
#* *#}
#* *##foreach( $dataType in $comm.getIocDataTypeList() )
#*    *##if( $foreach.index == 0 )
#*       *#\#define Ioc_${comm.getChannelName()}_CHANNEL_OFFSETS {  \
#*    *##end
#*    *#  IOC_OFFSETOF(Ioc_${comm.getChannelName()}_t, ${dataType.getCIdentifier()})#if($foreach.hasNext),  \\$newLine#else  \\$newLine#end
#*    *##if( !$foreach.hasNext )
#*       *#}
#*    *##end
#* *##end
#* *#
#end

/*===================================================================
 * Configuration Initializer
 *==================================================================*/
\#define IOC_CHANNEL_CONFIGURATIONS {  \
#foreach( $comm in $IocCommsList )
#* *#  /* $foreach.index */ Ioc_${comm.getChannelName()}_CFG#if($foreach.hasNext),  \\$newLine#else  \\$newLine#end
#end
}

/*===================================================================
 * Readable Region Symbol Declarations
 *==================================================================*/
#if( $OsModel.isMicroKernel() )
#* *##foreach( $app in $AllApplicationsList )
#*    *##if( $IocCommsList.isTrappingSender($app) )
#*       *#extern const ioc_uint8_t IOC_MR_START_ADR($app.getName());
#*       *#extern const ioc_uint8_t IOC_MR_LIMIT_ADR($app.getName());
#*    *##end
#* *##end
#end

/*===================================================================
 * Readable Regions Initializer
 *==================================================================*/
#if( $OsModel.isMicroKernel() )
#* *#\#define IOC_CFG_NREADABLEMKREGIONS  MK_CFG_NAPPLICATIONS
#* *#\#define IOC_CFG_READABLEMKREGIONS {  \
#* *##foreach( $app in $AllApplicationsList )
#*    *##if( $IocCommsList.isTrappingSender($app) )
#*       *#  /* $foreach.index */ IOC_ADDRESSRANGE_BEGIN_END_INIT(&IOC_MR_START_ADR($app.getName()), &IOC_MR_LIMIT_ADR($app.getName()))#if($foreach.hasNext),  \\$newLine#else  \\$newLine#end
#*    *##else
#*       *#  /* $foreach.index */ IOC_EMPTY_ADDRESSRANGE_INIT#if($foreach.hasNext),  \\$newLine#else  \\$newLine#end
#*    *##end
#* *##end
#* *#}

#end

#ifdef __cplusplus
}
#endif
#endif  /* IOC_CHCFG_H */

<?xml version="1.0" encoding="UTF-8"?>
<specdocument>
  <specobjects doctype="lim">

    <specobject>
      <id>PduR.EB.IntReq.RestrictTpGwToSF</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
      
      
      Restriction of TP gateway to single frames.
      TP gateway (1:n, n&gt;1) of an I-PDU from a source transport protocol module to multiple
      destination transport protocol modules is restricted to single frames (SF) on the Tx-side. This
      implies that the completely stored I-PDU is fetched with a single call by
      <code>PduR_&lt;LoTp&gt;CopyTxData</code>. Calling the function
      <code>PduR_&lt;LoTp&gt;CopyTxData</code> with a size
      <parameter>PduInfoPtr-&gt;SduLength</parameter> different to the complete I-PDU results in return
      value <code>BUFREQ_E_BUSY</code>. Calling the function
      <code>PduR_&lt;LoTp&gt;CopyTxData</code> after requesting the available size of data
      with <parameter>PduInfoPtr-&gt;SduLength = 0</parameter> by
      <code>PduR_&lt;LoTp&gt;CopyTxData</code> returns an
      <parameter>AvailableDataSize</parameter> of the completely stored I-PDU except the last one
      which returns <parameter>0</parameter>.
      </description>
      <rationale>
      On a transport protocol module, an I-PDU can be transported in multiple N-PDUs (FF and
      CFs) or in a single N-PDU (SF). The typical case is that an I-PDU transported in multiple
      N-PDUs does not multicast I-PDUs (i.e. physical addressing) and in a single N-PDU may be
      multicast I-PDUs (i.e. functional addressing). Furthermore, the consumption of hardware
      resources (RAM, run time) is reduced.
      </rationale>
      
    </specobject>

    <specobject>
      <id>PduR.EB.IntReq.RestrictTpMulticastTxToSF</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        
        
        Restriction of multicast transmission for TP-PDUs to single frames.
        Multicast transmission of TP-PDUs (1:n, n&gt;1) of an I-PDU from a local module to multiple
        destination transport protocol modules is restricted to single frames (SF). This
        implies that the completely stored I-PDU is fetched with a single call by
        <code>PduR_&lt;LoTp&gt;CopyTxData</code>. Calling the function <code>PduR_&lt;LoTp&gt;CopyTxData</code>
        with a size <parameter>PduInfoPtr-&gt;SduLength</parameter> different to the complete I-PDU results
        in returning <code>BUFREQ_E_BUSY</code>.
      </description>
      <rationale>
        Point out the AUTOSAR restriction to single frames since not directly visible with the requirements
        specified by underlying AUTOSAR SWS 4.0.3. This refers to multiple occurrences within its text, like for
        instance to '13.3 Changed SWS Items' where 'Restricted multicast TP transmission to single frames'
        is mentioned for the both requirements linked or to '1.3 I-PDU handling' which speaks of
        'The PDU Router module can: Multicast (1:n) an I-PDU (Single Frame (SF)) from a local module to
        transport protocol module(s)'.
      </rationale>
      
      
    </specobject>

    <specobject>
      <id>PduR.EB.IntReq.BlockLoTpCopyTxDataForTpMulticast</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
      
      
      Blocked <code>PduR_LoTpCopyTxData</code> unless all <code>LoTp_Transmit</code> are called for TP multicast
      transmission.
      The call of <code>PduR_LoTpCopyTxData()</code> is blocked by BSW for TP multicast transmission (1:n, n&gt;1) unless all calls
      of <code>LoTp_Transmit()</code> are executed within <code>PduR_UpTransmit()</code>. <code>BUFREQ_E_BUSY</code> is returned
      by <code>PduR_LoTpCopyTxData</code> in that case.
      </description>
      <rationale>
      This reduces the number of possible race conditions.
      </rationale>
      
    </specobject>

    <specobject>
      <id>PduR.EB.IntReq.BlockLoTpCopyTxDataForDirectTpGw</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
      
      
      Blocked <code>PduR_LoTpCopyTxData</code> unless all <code>LoTp_Transmit</code> are called for a direct TP
      gateway.
      The call of <code>PduR_LoTpCopyTxData()</code> is blocked by BSW for a direct TP gateway unless all calls of
      <code>LoTp_Transmit()</code> are executed within <code>PduR_LoTpRxIndication()</code>. <code>BUFREQ_E_BUSY</code> is returned
      by <code>PduR_LoTpCopyTxData</code> in that case.
      </description>
      <rationale>
      This reduces the number of possible race conditions.
      </rationale>
      
    </specobject>

    <specobject>
      <id>PduR.EB.IntReq.DeferLoTpTxConfirmationForTpMulticast</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
      
      
      Defer <code>PduR_LoTpTxConfirmation</code> until all <code>LoTp_Transmit</code> are called for a TP multicast transmission.
      The call of <code>PduR_LoTpTxConfirmation()</code> shall be deferred for a multicast TP transmission until all calls of
      <code>LoTp_Transmit()</code> are executed within <code>PduR_UpTpTransmit()</code>. This becomes relevant especially when
      multi-partition routing is applied to the PduR module. Proper scheduling might overcome this problem.
      </description>
      <rationale>
      This ensures that no race condition occurs regarding the state handling of <code>LoTp_Transmit()</code> within <code>PduR_UpTpTransmit()</code>
      to <code>PduR_LoTpTxConfirmation()</code>. <code>LoTp_Transmit()</code> needs to be called for all enabled destinations prior to
      any <code>PduR_LoTpTxConfirmation()</code>.
      </rationale>
      
    </specobject>

    <specobject>
      <id>PduR.EB.IntReq.RestrictNto1toSingleActivatedRPath</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        
        
        For N:1 PDU routing, there shall be at most one activated source PDU of the gateway
        routing path.
      </description>
      <rationale>
        As stated in RfC #71728, comment #3, it will be ensured that at run-time at most one of these N sources will be active.
        Note that this has been refined in RfC #67569, comment #84.
        'Active' means, that concurrent calls are not possible, e.g. a CopyRxData from CAN1 can not be interrupted by a
        StartOfReception from CAN2. I.e. a tester is either used on CAN1 or CAN2, not to both.
      </rationale>
      <comment>
        This requirement covers the TP gatewaying part of SWS_PDUR_00827 from AUTOSAR 4.4.0 release.
      </comment>
      
    </specobject>

<specobject>
  <id>PduR.EB.IntReq.QualityMultiCore</id>
  <status>approved</status>
  <source>EB integration requirement</source>
  <version>1</version>
  <description>
    In general, the usage of the PduR module with a distributed communication stack is not ready for mass production.
  </description>
  <comment>
    The decoupling feature is enabled with PduRGeneral/PduRMultiCoreSupport.
  </comment>
  
</specobject>

    <specobject>
      <id>PduR.EB.IntReq.PartitionIndicesInClientServerEntities</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        Names of client-server entities shall include partition indices to
        distinguish different connections between multiple partitions in a unique way.
        The meaning of them is defined as follows:
        For distributed modules which are upper and lower layer module of the PduR at the same time
        (e.g. IpduM), source as well as destination partition indices are to be used, e.g.:
        IpduM_IfLLClient&lt;SrcIdx&gt;_&lt;DestIdx&gt;, where &lt;SrcIdx&gt; is the index of the
        source partition and &lt;DestIdx&gt; is the index of the destination partition.
        For non-distributed modules, only the source partition index &lt;SrcIdx&gt; is required,
        e.g.: CanIf_IfLLClient&lt;SrcIdx&gt;.
      </description>
      <rationale>
        Restrictions the Rte is imposed require to do so.
      </rationale>
      
      
    </specobject>

    <specobject>
      <id>PduR.EB.IntReq.ProtectionMechanismMulticore</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        This protection mechnism constraints apply to PduR module with enabled multicore feature.
        Critical sections PDUR_EXCLUSIVE_AREA_0 have to be protected with inter-core locks
        (Os spinlocks). PDUR_EXCLUSIVE_AREA_0 is the default critical section holding for most cases.
        For certain cases no expensive inter-core locks are necessary. However, following constraints
        have to be considered:
        Critical section PDUR_EXCLUSIVE_AREA_1 protects data for an inter-core gateway to a
        communication interface module with direct data provision using single buffer as well
        as for an inter-core multicast gateway to an upper layer module using single buffer.
        For PDUR_EXCLUSIVE_AREA_1 no protection is necessary if it is ensured that
        PduR_LoIfRxIndication is not called again before LoIf_ Transmit, respectively Up_RxIndication,
        has completed. I.e. the LoIf_Transmit, respectively Up_RxIndication, API is either
        represented by a synchronous inter-core call (i.e. blocking) or scheduling done by the
        integrator ensures so.
        PDUR_EXCLUSIVE_AREA_2 is assigned to protect API for multicast transmit use-case for
        communication interface modules, i.e. PduR_MCastIfMCoreUpTransmit.
        For PDUR_EXCLUSIVE_AREA_2 no protection is necessary if it is ensured that
        PduR_MCastIfMCoreUpTransmit is not called again before IfTransmit calls have completed.
        E.g. IfTransmit APIs represented with synchronous inter-core calls (i.e. blocking) or
        scheduling of integrator ensures this otherwise.
      </description>
      <comment>
        The both described scenarios for critical section PDUR_EXCLUSIVE_AREA_1 refer to handler
        functions PduR_GateIfSbNoInitMCoreRxIndication and PduR_GateIfSbNoInitMCoreUpRxIndication.
        Synchronicity is basically ensured for PduR_&lt;ApiInfix&gt;_rcse&lt;LoIf&gt;SkeletonIfTransmit,
        respectively PduR_&lt;ApiInfix&gt;_rcse&lt;LoIf&gt;SkeletonIfRxIndication, since
        specified by a synchronous server call point in BSWMD.
      </comment>
      
    </specobject>

    <specobject>
      <id>PduR.EB.IntReq.TriggerTransmitWithMultiCore</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
      
        Ensure that PDUs which are transmitted on a network using trigger transmit data provision
        are assigned throughout the complete communication stack to the very same core / partition
        dedicated to the respective network.
      </description>
      
    </specobject>

    <specobject>
      <id>PduR.EB.IntReq.IPduCallouts</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        I-PDU callouts, which are basically enabled by parameter <parameter>PduRApiHooks</parameter> for a BSW module, shall be handled with care.
        For instance when an I-PDU is processed with <function>PduR_&lt;LoTp&gt;StartOfReception</function>, a TP buffer is assigned.
        If the exit callout is used to return <code>BUFREQ_E_NOT_OK</code>, it needs to be ensured that the TP buffer is released.
      </description>
      <rationale>
        Enabling I-PDU callouts for the reception of TP-PDUs by parameter <parameter>PduRApiHooks</parameter>
        makes it theoretically possible to modify I-PDU data. This should be avoided according to requirement SWS_PduR_00160.
        Moreover, it would make it also possible to manipulate the processing of the I-PDU as specified by AUTOSAR and
        increases vulnerability.
      </rationale>
      
    </specobject>

  </specobjects>
</specdocument>

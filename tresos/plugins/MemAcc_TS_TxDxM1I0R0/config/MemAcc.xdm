<?xml version='1.0'?>
<datamodel version="8.0" 
           xmlns="http://www.tresos.de/_projects/DataModel2/18/root.xsd" 
           xmlns:a="http://www.tresos.de/_projects/DataModel2/18/attribute.xsd" 
           xmlns:v="http://www.tresos.de/_projects/DataModel2/06/schema.xsd" 
           xmlns:d="http://www.tresos.de/_projects/DataModel2/06/data.xsd">

  <d:ctr type="AUTOSAR" factory="autosar" 
         xmlns:ad="http://www.tresos.de/_projects/DataModel2/08/admindata.xsd" 
         xmlns:ce="http://www.tresos.de/_projects/DataModel2/18/childenable.xsd" 
         xmlns:cd="http://www.tresos.de/_projects/DataModel2/08/customdata.xsd" 
         xmlns:f="http://www.tresos.de/_projects/DataModel2/14/formulaexpr.xsd" 
         xmlns:icc="http://www.tresos.de/_projects/DataModel2/08/implconfigclass.xsd" 
         xmlns:mt="http://www.tresos.de/_projects/DataModel2/11/multitest.xsd"  
         xmlns:variant="http://www.tresos.de/_projects/DataModel2/11/variant.xsd">
    <d:lst type="TOP-LEVEL-PACKAGES">
      <d:ctr name="TS_TxDxM1I0R0" type="AR-PACKAGE">
        <d:lst type="ELEMENTS">
          <d:chc name="MemAcc" type="AR-ELEMENT" value="MODULE-DEF">
            <v:ctr type="MODULE-DEF">
              <a:a name="ADMIN-DATA" type="ADMIN-DATA">
                <ad:ADMIN-DATA>
                  <ad:LANGUAGE>EN</ad:LANGUAGE>
                  <ad:DOC-REVISIONS>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>4.7.0</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>AUTOSAR</ad:ISSUED-BY>
                    </ad:DOC-REVISION>
                    <ad:DOC-REVISION>
                      <ad:REVISION-LABEL>1.0.10</ad:REVISION-LABEL>
                      <ad:ISSUED-BY>Elektrobit Automotive GmbH</ad:ISSUED-BY>
                      <ad:DATE>2024-05-02T23:59:59Z</ad:DATE>
                    </ad:DOC-REVISION>
                  </ad:DOC-REVISIONS>
                </ad:ADMIN-DATA>
              </a:a>
              <a:a name="DESC">
                <a:v>&lt;html&gt;
                    Configuration of the MemAcc (Memory Access module) module.
                      &lt;p&gt;The MemAcc (Memory Access module) coordinates the memory
                      access by multiple users in order to avoid conflicts with this shared
                      memory resource.&lt;/p&gt;
                      &lt;p&gt;The module abstracts from the memory device specific addressing
                      scheme and provides a logical addressing scheme to the upper
                      layer&lt;/p&gt;
                    &lt;/html&gt;</a:v>
              </a:a>
              <a:a name="LOWER-MULTIPLICITY" value="0"/>
              <a:a name="RELEASE" value="asc:4.7"/>
              <a:a name="UPPER-MULTIPLICITY" value="1"/>
              <a:a name="UUID" value="34e31942-7ddc-4c3c-9775-c1c3e8d758f2"/>
              <v:ctr name="PublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Additional published parameters not covered by CommonPublishedInformation container.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="EB Published Information"/>
                <a:a name="TAB" value="EB Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:cb4128ed-26c1-4ddd-906e-854bed917e07"/>
                <v:var name="PbcfgMSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Specifies whether or not the MemAcc can use the PbcfgM module for post-build support.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="PbcfgM support"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:eb61002e-69c0-4f16-a910-c27adb75f6ee"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
              </v:ctr>
              <v:ctr name="CommonPublishedInformation" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>EN:
                    &lt;html&gt;
                      Common container, aggregated by all modules. It contains published information about vendor and versions.
                  &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LABEL" value="Common Published Information"/>
                <a:a name="UUID" 
                     value="ECUC:a00be3e0-8783-9123-2d52-1eb616737ca6"/>
                <v:var name="ArMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:948f3f2e-f129-4bc5-b4e1-7a7bdb8599e1"/>
                  <a:da name="DEFAULT" value="4"/>
                </v:var>
                <v:var name="ArMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:2893b920-59d5-4ac2-b2c1-e23742e66d70"/>
                  <a:da name="DEFAULT" value="7"/>
                </v:var>
                <v:var name="ArPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of AUTOSAR specification on which the appropriate implementation is based on.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="AUTOSAR Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:6428eb9b-8790-488a-b9a3-0fba52d0f59e"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="SwMajorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Major version number of the vendor specific implementation of the module.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Major Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:605b18ae-3f9a-41d4-9225-67c9c5f6fc34"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="SwMinorVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Minor version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Minor Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a7fe44dc-ea25-4b8d-8fad-9fbcae86d56f"/>
                  <a:da name="DEFAULT" value="0"/>
                </v:var>
                <v:var name="SwPatchVersion" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Patch level version number of the vendor specific implementation of the module. The numbering is vendor specific.
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Software Patch Version"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a318d2d9-0e75-49da-ac43-e7e4e682e2f9"/>
                  <a:da name="DEFAULT" value="10"/>
                </v:var>
                <v:var name="ModuleId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Module ID of this module from Module List
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Numeric Module ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:78bc8362-080f-4253-b3da-804ab69a7154"/>
                  <a:da name="DEFAULT" value="41"/>
                </v:var>
                <v:var name="VendorId" type="INTEGER_LABEL">
                  <a:a name="DESC">
                    <a:v>EN:
                      &lt;html&gt;
                        Vendor ID of the dedicated implementation of this module according to the AUTOSAR vendor list
                    &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Vendor ID"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:01b0f467-6943-4558-b4f2-3fa1fad28449"/>
                  <a:da name="DEFAULT" value="1"/>
                </v:var>
                <v:var name="Release" type="STRING_LABEL">
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       value="PublishedInformation"/>
                  <a:a name="LABEL" value="Release Information"/>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" 
                       value="ECUC:1c68a547-f24e-4a4e-9540-69fbd533ec89"/>
                  <a:da name="DEFAULT" value=""/>
                </v:var>
              </v:ctr>
              <v:var name="IMPLEMENTATION_CONFIG_VARIANT" type="ENUMERATION">
                <a:a name="LABEL" value="Config Variant"/>
                <a:a name="UUID" value="71712b7f-b5b5-49f9-91c3-363f8df91ad8"/>
                <a:da name="DEFAULT" value="VariantPreCompile"/>
                <a:da name="EDITABLE" value="false"/>
                <a:da name="RANGE" value="VariantPreCompile"/>
              </v:var>
              <v:var name="POST_BUILD_VARIANT_USED" type="BOOLEAN">
                <a:a name="DESC" 
                     value="Indicates whether a module implementation has or plans to have (i.e., introduced at link or post-build time) new post-build variation points."/>
                <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                     type="IMPLEMENTATIONCONFIGCLASS">
                  <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                </a:a>
                <a:a name="LABEL" value="Post Build Variant Used"/>
                <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                <a:a name="POSTBUILDVARIANTVALUE" value="false"/>
                <a:a name="VISIBLE" value="false"/>
                <a:da name="DEFAULT" value="false"/>
                <a:da name="READONLY" value="true"/>
                <a:da name="TOOLTIP" 
                      value="Indicates whether a module implementation has or plans to have (i.e., introduced at link or post-build time) new post-build variation points."/>
              </v:var>
              <v:lst name="MemAccAddressAreaConfiguration" type="MAP">
                <a:da name="MAX" value="65535"/>
                <a:da name="MIN" value="1"/>
                <v:ctr name="MemAccAddressAreaConfiguration" 
                       type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;This container includes the configuration of AddressArea specific parameters for the MemAcc module.&lt;/p&gt;
                          &lt;p&gt;An AddressArea is a logical area of memory. Upper layers only use
                            logical addresses to access the address area. It is the job of MemAcc
                            to map between logical and physical addresses. An AddressArea
                            contains SubAddressAreas and each SubAddressArea is part of a
                            physically continuous memory area (sector batch).&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="UUID" value="0a8115fd-1772-4686-aecd-c66643516a10"/>
                  <v:var name="MemAccAddressAreaId" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;This value specifies a unique identifier which is used to reference to anAddressArea&lt;/p&gt;
                            &lt;p&gt;This identifier is used as parameter for MemAcc jobs in order to
                              distinguish between several AddressAreas with the same logical
                              addresses&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="29378e67-6f7a-464f-8a2c-fb09fd553de8"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="INVALID" type="Multi">
                      <mt:range>
                        <mt:tst expr="&lt;=65535"/>
                        <mt:tst expr="&gt;=0"/>
                      </mt:range>
                      <mt:xpath false="MemAccAddressAreaId should be unique." 
                                expr="text:uniq(as:modconf(&apos;MemAcc&apos;)[1]/MemAccAddressAreaConfiguration/eb-list::*/MemAccAddressAreaId, node:value(.))"/>
                    </a:da>
                  </v:var>
                  <v:var name="MemAccAddressAreaPriority" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;This value specifies the priority of an AddressArea compared to other AddressAreas (0 = lowest priority, 65535 = highest priority)&lt;/p&gt;
                            &lt;p&gt;For each AddressArea only one job can be processed at a time.
                              MemAcc processes the jobs priority based. In case a job with a higher
                              priority is requested by an upper layer, the lower priority jobs are
                              suspended until the higher priority job is completed&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="398a9505-5a93-4089-98d0-412752a71933"/>
                    <a:da name="DEFAULT" value="0"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=65535"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="MemAccBufferAlignmentValue" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Buffer alignment value inherited by MemAcc upper layer modules&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="cb06e99e-34a2-4bf8-bfcc-9e7ec8ec78ba"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=255"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="MemAccJobEndNotificationName" 
                         type="FUNCTION-NAME">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Job end notification function which is called after MemAcc job
                              completion. If this parameter is left empty, no job end notification is
                              triggered and the upper layer module needs to poll the job results&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="false"/>
                    <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="dfa9be9e-b08c-491e-9a77-ce62efe8d8f9"/>
                  </v:var>
                  <v:lst name="MemAccSubAddressAreaConfiguration" type="MAP">
                    <a:da name="MAX" value="65536"/>
                    <a:da name="MIN" value="1"/>
                    <v:ctr name="MemAccSubAddressAreaConfiguration" 
                           type="IDENTIFIABLE">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                            &lt;p&gt;This container includes the configuration parameters for a physically
                              continuous area of memory.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="UUID" 
                           value="f3ecee00-cdf9-468b-b5bc-e86863f6bf6b"/>
                      <v:var name="MemAccLogicalStartAddress" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This value specifies the logical start address of the SubAddressArea.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="27dd831e-a379-4836-83b5-7ee0f061dfe2"/>
                        <a:da name="DEFAULT" value="0"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=18446744073709551615"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="MemAccNumberOfSectors" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This value specifies the number of physical sectors of the SubAddressArea&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="cee5887b-9349-4fdc-9442-11bca2476363"/>
                        <a:da name="DEFAULT" value="1"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=4294967295"/>
                          <a:tst expr="&gt;=1"/>
                        </a:da>
                      </v:var>
                      <v:var name="MemAccSectorOffset" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This value specifies the sector offset of the SubAddressArea in case the SubAddressArea should not start with the first sector of the referenced MemSectorBatch&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="f5efb1a0-874c-4abe-a882-fcc08bba4934"/>
                        <a:da name="DEFAULT" value="0"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=4294967295"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="MemAccNumberOfEraseRetries" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This value specifies the number of retries of a failed erase job&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;0: No retry, a failed job will be aborted immediately&lt;/li&gt;
                                  &lt;li&gt;&gt; 0: Retry the number of times before aborting the job&lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="d039c2d3-5313-485a-9d26-a6a3065d968c"/>
                        <a:da name="DEFAULT" value="0"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=255"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="MemAccNumberOfWriteRetries" type="INTEGER">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This value specifies the number of retries of a failed write job&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;0: No retry, a failed job will be aborted immediately&lt;/li&gt;
                                  &lt;li&gt;&gt; 0: Retry the number of times before aborting the job&lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                          <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="OPTIONAL" value="true"/>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="7e71ac7b-603a-4849-a12d-8aa970f314b9"/>
                        <a:da name="DEFAULT" value="0"/>
                        <a:da name="ENABLE" value="false"/>
                        <a:da name="INVALID" type="Range">
                          <a:tst expr="&lt;=255"/>
                          <a:tst expr="&gt;=0"/>
                        </a:da>
                      </v:var>
                      <v:var name="MemAccUseEraseBurst" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This parameter enables erase bursting for the related sub address area&lt;/p&gt;
                                &lt;p&gt;If it is enabled FlsEep/Mem BurstSettings should be enabled&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="1e8c9ea7-e5fe-46f2-a17a-dd0c184b5753"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:xpath>
                            <mt:tst 
                                    true="FlsEepBurstSettings is not configured, it shall be configured if MemAccUseEraseBurst is enabled. " 
                                    expr="(node:existsAndTrue(.))and(node:value(../MemAccMemInvocation)=&apos;DIRECT_LEGACY&apos;) and (not(node:exists(node:ref(../MemAccFlsEepSectorBatchRef)/FlsEepBurstSettings)))"/>
                            <mt:tst 
                                    true="MemBurstSettings is not configured, it shall be configured if MemAccUseEraseBurst is enabled. " 
                                    expr="(node:existsAndTrue(.))and(node:value(../MemAccMemInvocation)=&apos;DIRECT_STATIC&apos;) and (not(node:exists(node:ref(../MemAccSectorBatchRef)/MemBurstSettings)))"/>
                          </mt:xpath>
                        </a:da>
                      </v:var>
                      <v:var name="MemAccUseReadBurst" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This parameter enables read bursting for the related sub address area&lt;/p&gt;
                                &lt;p&gt;If it is enabled FlsEep/Mem BurstSettings should be enabled&lt;/p&gt;
                                &lt;p&gt;If this parameter is enabled the MemAcc will split the read/blankcheck 
                                  jobs up to the value of the ReadBurstSize, meaning it will function as 
                                  a Maximum Bytes Read per cycle&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="7257de4b-77e8-4325-9e7e-6c7a35d5ec7e"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:xpath>
                            <mt:tst 
                                    true="FlsEepBurstSettings is not configured, it shall be configured if MemAccUseReadBurst is enabled. " 
                                    expr="(node:existsAndTrue(.))and(node:value(../MemAccMemInvocation)=&apos;DIRECT_LEGACY&apos;) and (not(node:exists(node:ref(../MemAccFlsEepSectorBatchRef)/FlsEepBurstSettings)))"/>
                            <mt:tst 
                                    true="MemBurstSettings is not configured, it shall be configured if MemAccUseReadBurst is enabled. " 
                                    expr="(node:existsAndTrue(.))and(node:value(../MemAccMemInvocation)=&apos;DIRECT_STATIC&apos;) and (not(node:exists(node:ref(../MemAccSectorBatchRef)/MemBurstSettings)))"/>
                          </mt:xpath>
                        </a:da>
                      </v:var>
                      <v:var name="MemAccUseWriteBurst" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;This parameter enables write bursting for the related sub address area&lt;/p&gt;
                                &lt;p&gt;If it is enabled FlsEep/Mem BurstSettings should be enabled&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="19fd6a3a-d85d-455e-a648-b9bd45322c11"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:xpath>
                            <mt:tst 
                                    true="FlsEepBurstSettings is not configured, it shall be configured if MemAccUseWriteBurst is enabled. " 
                                    expr="(node:existsAndTrue(.))and(node:value(../MemAccMemInvocation)=&apos;DIRECT_LEGACY&apos;) and (not(node:exists(node:ref(../MemAccFlsEepSectorBatchRef)/FlsEepBurstSettings)))"/>
                            <mt:tst 
                                    true="MemBurstSettings is not configured, it shall be configured if MemAccUseWriteBurst is enabled. " 
                                    expr="(node:existsAndTrue(.))and(node:value(../MemAccMemInvocation)=&apos;DIRECT_STATIC&apos;) and (not(node:exists(node:ref(../MemAccSectorBatchRef)/MemBurstSettings)))"/>
                          </mt:xpath>
                        </a:da>
                      </v:var>
                      <v:var name="MemAccUseVariableWrite" type="BOOLEAN">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;When this parameter is enabled and the remaining length for a Write Job over a subarea is 
                                less the the &quot;WriteBurstSize&quot; and higher then the &quot;WriteSize&quot;, then the MemAcc shall trigger the 
                                lower layer Write Job with that remaining length. When the parameter is disabled the MemAcc
                                will split the lower layer Write Job sizes either by &quot;WriteSize&quot; or &quot;WriteBurstSize&quot;.&lt;/p&gt;
                                &lt;p&gt;Can only be enabled if MemAccUseWriteBurst is enabled.&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="2105b9e2-46c5-11ee-be56-0242ac120002"/>
                        <a:da name="DEFAULT" value="false"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="(node:existsAndTrue(../MemAccUseWriteBurst))"/>
                      </v:var>
                      <v:var name="MemAccMemInvocation" type="ENUMERATION">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;Defines how the Mem driver services are accessed and how the Mem driver is scheduled and activated/initialized&lt;/p&gt;
                                &lt;p&gt;Range&lt;/p&gt;
                                &lt;ul&gt;
                                  &lt;li&gt;&lt;code&gt;DIRECT_STATIC&lt;/code&gt; Mem driver is linked with application.Mem service functions are directly called by MemAcc. 
                                   Mem_Init is called by EcuM and Mem_MainFunction is triggered by SchM &lt;/li&gt;
                                  &lt;li&gt;&lt;code&gt;INDIRECT_DYNAMIC&lt;/code&gt; Mem driver is linked as a separate binary and is dynamically activated.
                                  MemAcc will use Mem driver header table to invoke Mem service functions.
                                  Call of Mem_Init and Mem_MainFunction is handled by MemAcc&lt;/li&gt;
                                  &lt;li&gt;&lt;code&gt;INDIRECT_STATIC&lt;/code&gt; Mem driver is linked with application.
                                  MemAcc will use Mem driver header table to invoke Mem service functions.
                                  Call of Mem_Init and Mem_MainFunction is handled by MemAcc.&lt;/li&gt;
                                  &lt;li&gt;&lt;code&gt;DIRECT_LEGACY&lt;/code&gt; FLs/Eep driver is linked with application. 
                                  FLs/Eep service functions are directly called by MemAcc. 
                                  Fls(Eep)_Init is called by EcuM and Fls(Eep)_MainFunction is triggered by SchM . 
                                  MemAccFlsEepSectorBatchRef reference shall be configured.&lt;/li&gt;
                                &lt;/ul&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="ad709ef7-0035-4370-8b22-be19b219d6d8"/>
                        <a:da name="DEFAULT" value="DIRECT_STATIC"/>
                        <a:da name="RANGE">
                          <a:v>DIRECT_STATIC</a:v>
                          <a:v>INDIRECT_DYNAMIC</a:v>
                          <a:v>INDIRECT_STATIC</a:v>
                          <a:v>DIRECT_LEGACY</a:v>
                        </a:da>
                      </v:var>
                      <v:var name="MemAccMemNamePrefix" type="STRING">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;Depending on the MemAccUseMemFuncPtrTable configuration, this prefix is either used to reference the Mem driver header structure or the  according Mem API function&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="SCOPE" value="LOCAL"/>
                        <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                        <a:a name="UUID" 
                             value="1a66c515-9f38-4264-9a1f-85f6f6b36993"/>
                        <a:da name="INVALID" type="Multi">
                          <mt:xpath>
                            <mt:tst 
                                    true="MemAccMemNamePrefix is empty, it shall be configured. " 
                                    expr="(node:empty(.))"/>
                            <mt:tst 
                                    true="The configured MemAccMemNamePrefix does not match the referenced Mem driver name. " 
                                    expr="(not(node:empty(.))) and (node:value(../MemAccMemInvocation)=&apos;DIRECT_STATIC&apos;) and (node:refvalid(../MemAccSectorBatchRef)) and(not (text:match(node:value(../MemAccSectorBatchRef),concat(&apos;^ASPath:/&apos;,node:value(.),&apos;/&apos;))))"/>
                          </mt:xpath>
                        </a:da>
                      </v:var>
                      <v:ref name="MemAccFlsEepSectorBatchRef" 
                             type="SYMBOLIC-NAME-REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;Reference to FlsEepSectorBatch mapped to the SubAddressArea&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                        <a:a name="UUID" 
                             value="03415a7b-a7bb-4aa2-b493-8d651fb795f6"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="(../MemAccMemInvocation=&apos;DIRECT_LEGACY&apos;)"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="Invalid reference. A valid reference to a MemAccMemDeviceSectorBatch shall be provided."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/MemAcc/FlsEepSectorBatch"/>
                      </v:ref>
                      <v:ref name="MemAccSectorBatchRef" type="REFERENCE">
                        <a:a name="DESC">
                          <a:v>&lt;html&gt;
                                &lt;p&gt;Reference to MemSectorBatch mapped to the SubAddressArea&lt;/p&gt;
                              &lt;/html&gt;</a:v>
                        </a:a>
                        <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                             type="IMPLEMENTATIONCONFIGCLASS">
                          <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                        </a:a>
                        <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                        <a:a name="UUID" 
                             value="9f0c85fa-5327-470a-9822-1bd64d361e17"/>
                        <a:da name="ENABLE" type="XPath" 
                              expr="(../MemAccMemInvocation!=&apos;DIRECT_LEGACY&apos;)"/>
                        <a:da name="INVALID" type="XPath" 
                              expr="node:refvalid(.)" 
                              false="Invalid reference. A valid reference to a MemAccMemDeviceSectorBatch shall be provided."/>
                        <a:da name="REF" 
                              value="ASPathDataOfSchema:/AUTOSAR/EcucDefs/Mem/MemInstance/MemSectorBatch"/>
                      </v:ref>
                    </v:ctr>
                  </v:lst>
                </v:ctr>
              </v:lst>
              <v:lst name="FlsEepSectorBatch" type="MAP">
                <a:da name="ENABLE" type="XPath" 
                      expr="count(as:modconf(&apos;MemAcc&apos;)[1]/MemAccAddressAreaConfiguration/eb-list::*/MemAccSubAddressAreaConfiguration/eb-list::*[MemAccMemInvocation=&apos;DIRECT_LEGACY&apos;]) &gt; 0"/>
                <a:da name="MIN" value="1"/>
                <v:ctr name="FlsEepSectorBatch" type="IDENTIFIABLE">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                        &lt;p&gt;Configuration description of Fls/Eep sector batch. Sector batch means that homogenous and coherent sectors can be configured as one FlsEepSector element&lt;/p&gt;
                        &lt;p&gt;It is enabled if &lt;code&gt;MemAccMemInvocation=&apos;DIRECT_LEGACY&apos;&lt;/code&gt; for at least one MemAccSubAddressAreaConfiguration &lt;/p&gt;
                        &lt;p&gt;The configuration of this Sector batch shall be consistent with &lt;/p&gt;
                        &lt;ul&gt;
                          &lt;li&gt;Fls Sector batch &quot;../FlsSectorList/FlsSector&quot;, in case a sector batch is configured to point to a FLS device&lt;/li&gt;
                          &lt;li&gt;Eep Init Configuration &quot;../Eep/EepInitConfiguration&quot;, in case a sector batch is configured to point to an EEP device&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="UUID" value="6de41b68-d54f-42d3-8404-c4e0fbcc531c"/>
                  <v:var name="FlsEepStartAddress" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Physical start address of the sector in Fls/Eep.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="300aa3a3-2999-4394-9e8f-3c49cca13f17"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=18446744073709551615"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:var name="FlsEepReadChunkSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Size of chunks in which a read job is split and sent to a legacy driver in normal mode.&lt;/p&gt;
                            &lt;p&gt;It should be a multiple of FlsMaxReadNormalMode/EepReadUnitSize.&lt;/p&gt;
                            &lt;p&gt;This size will behave for upper layer in same way as MemDrv read page size: read jobs length shall be a multiple of this size, and prioritization of other pending jobs will be done only after finishing an ongoing chunk.&lt;/p&gt;
                            &lt;p&gt;For faster reads, burst mode shall be enabled and configured with coarser read size.&lt;/p&gt;
                            &lt;p&gt;Note that handling of an available fast driver mode is not handled by MemAcc.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="688a5d5c-d59f-4000-9919-e0cad18a8964"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=4294967295"/>
                      <a:tst expr="&gt;=1"/>
                    </a:da>
                  </v:var>
                  <v:var name="FlsEepWriteChunkSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Size of chunks in which a write job is split and sent to a legacy driver in normal mode.&lt;/p&gt;
                            &lt;p&gt;It should be a multiple of FlsMaxWriteNormalMode/EepWriteUnitSize.&lt;/p&gt;
                            &lt;p&gt;This size will behave for upper layer in same way as MemDrv write page size: read jobs length shall be a multiple of this size, and prioritization of other pending jobs will be done only after finishing an ongoing chunk.&lt;/p&gt;
                            &lt;p&gt;For flash drivers, depending on usual write sizes, a multiple of FlsMaxWriteNormalMode could be more efficient in terms of write speed. &lt;/p&gt;
                            &lt;p&gt;The downside of optimizing the write in bigger chunks is that the upper layer has to provide MemAcc the jobs in a buffer that has the size multiple of this configuration&lt;/p&gt;
                            &lt;p&gt;For more flexible alignment requirements and fast write of bigger jobs, burst mode shall be enabled and configured with coarser size.&lt;/p&gt;
                            &lt;p&gt;Note that handling of an available fast driver mode is not handled by MemAcc.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="46887b2b-83a6-4845-ab56-438c3974e49d"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=4294967295"/>
                      <a:tst expr="&gt;=1"/>
                    </a:da>
                  </v:var>
                  <v:var name="FlsEepEraseSectorSize" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines Fls/Eep sector size during erase operation.&lt;/p&gt;
                            &lt;p&gt;It is equivalent to FlsSectorSize/EepEraseUnitSize&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="18f2670d-24a4-4247-ba7a-0168704868bb"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=4294967295"/>
                      <a:tst expr="&gt;=1"/>
                    </a:da>
                  </v:var>
                  <v:var name="FlsEepNumberOfSectors" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Number of contiguous sectors with identical values for MemSectorSize and MemPageSize&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="cee5887b-9349-4fdc-9442-11bca2476363"/>
                    <a:da name="DEFAULT" value="1"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=65536"/>
                      <a:tst expr="&gt;=1"/>
                    </a:da>
                  </v:var>
                  <v:var name="FlsEepSpecifiedEraseCycles" type="INTEGER">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines maximum Fls/Eep erase cycles per sector batch.&lt;/p&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                    <a:a name="SCOPE" value="LOCAL"/>
                    <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                    <a:a name="UUID" 
                         value="634d790b-d3a1-436c-966b-bd7bc0bd9b69"/>
                    <a:da name="INVALID" type="Range">
                      <a:tst expr="&lt;=4294967295"/>
                      <a:tst expr="&gt;=0"/>
                    </a:da>
                  </v:var>
                  <v:ctr name="FlsEepBurstSettings" type="IDENTIFIABLE">
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v mclass="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="OPTIONAL" value="true"/>
                    <a:a name="UUID" 
                         value="6de41b68-d54f-42d3-8404-c4e0fbcc531c"/>
                    <a:da name="ENABLE" value="false"/>
                    <v:var name="FlsEepReadBurstSize" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;Defines maximum Fls/Eep read size if burst is enabled during read/blankCheck operations.&lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SCOPE" value="LOCAL"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" 
                           value="3e889152-4f22-4de7-88fc-a6be88614f0c"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&lt;=4294967295"/>
                        <a:tst expr="&gt;=0"/>
                      </a:da>
                    </v:var>
                    <v:var name="FlsEepWriteBurstSize" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;Defines maximum Fls/Eep burst page size during write operation&lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SCOPE" value="LOCAL"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" 
                           value="cab7fcf6-d633-4457-9fc5-a475e92517d4"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&lt;=4294967295"/>
                        <a:tst expr="&gt;=0"/>
                      </a:da>
                    </v:var>
                    <v:var name="FlsEepEraseBurstSize" type="INTEGER">
                      <a:a name="DESC">
                        <a:v>&lt;html&gt;
                              &lt;p&gt;Defines maximum Fls/Eep burst sector size during erase operation&lt;/p&gt;
                            &lt;/html&gt;</a:v>
                      </a:a>
                      <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                           type="IMPLEMENTATIONCONFIGCLASS">
                        <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                      </a:a>
                      <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                      <a:a name="SCOPE" value="LOCAL"/>
                      <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                      <a:a name="UUID" 
                           value="54ea9c7d-ca5d-4cec-8c2c-e9c887fc1568"/>
                      <a:da name="INVALID" type="Range">
                        <a:tst expr="&lt;=4294967295"/>
                        <a:tst expr="&gt;=0"/>
                      </a:da>
                    </v:var>
                  </v:ctr>
                </v:ctr>
              </v:lst>
              <v:ctr name="MemAccUserHeader" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        &lt;p&gt;Defines user specific header files for user-defined symbols.&lt;/p&gt;
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="UUID" value="f8d73e02-7414-4640-be17-1676dcebcbb1"/>
                <v:lst name="MemAccUserHeader">
                  <a:a name="LABEL" value="User Header"/>
                  <a:da name="MAX" value="255"/>
                  <a:da name="MIN" value="0"/>
                  <v:var name="MemAccUserHeader" type="STRING">
                    <a:a name="DESC">
                      <a:v>&lt;html&gt;
                            &lt;p&gt;Defines user specific header files for user-defined symbols&lt;/p&gt;.
                            &lt;p&gt;Note: &lt;code&gt;MemAccUserHeader&lt;/code&gt; shall be configured in the following scenarios.&lt;/p&gt;
                            &lt;ul&gt;
                              &lt;li&gt;If an address area is configured with parameter
                              &lt;code&gt;AddressAreaJobEndNotification&lt;/code&gt;, user header must be set to a valid header file including the declaration of callbacks.&lt;/li&gt;   
                            &lt;/ul&gt;
                          &lt;/html&gt;</a:v>
                    </a:a>
                    <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                         type="IMPLEMENTATIONCONFIGCLASS">
                      <icc:v class="PreCompile">VariantPreCompile</icc:v>
                    </a:a>
                    <a:a name="LABEL" value="User Header File"/>
                    <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  </v:var>
                </v:lst>
              </v:ctr>
              <v:ctr name="MemAccGeneral" type="IDENTIFIABLE">
                <a:a name="DESC">
                  <a:v>&lt;html&gt;
                        &lt;p&gt;Defines the general configuration parameters of the MemAcc module.&lt;/p&gt;
                      &lt;/html&gt;</a:v>
                </a:a>
                <a:a name="LAYOUT" value="VERTICAL"/>
                <a:a name="UUID" value="cb63e277-4a9a-4ed3-9298-26e82c2267a3"/>
                <v:var name="MemAccMainFunctionPeriod" type="FLOAT">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;This value specifies the fixed call cycle for MemAcc_MainFunction().&lt;/p&gt;
                          &lt;p&gt;Additionally, if a job is ongoing on a Mem, the underlying
                          Mem_MainFunction will be triggered directly by MemAcc at this fixed
                          call cycle.&lt;/p&gt;
                          &lt;p&gt;MemAcc does not depend on a fixed cycle time; in can be triggered at
                          arbitrary rates.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="ECU"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="2a2f8f7a-bfb6-4c97-8fb5-7b85daace73b"/>
                  <a:da name="DEFAULT" value="0.005"/>
                  <a:da name="INVALID" type="Range">
                    <a:tst expr="&lt;=1.0"/>
                    <a:tst expr="&gt;=0.0001"/>
                  </a:da>
                </v:var>
                <v:var name="MemAccUseMemFuncPtrTable" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;This parameter defines if the Mem driver functions are called using the Mem function pointer table API.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="56190fb2-cb0f-4ea0-acd7-62ec5d212957"/>
                  <a:a name="VISIBLE" value="false"/>
                  <a:da name="DEFAULT" value="true"/>
                </v:var>
                <v:var name="MemAcc64BitSupport" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;If this option is selected, the address type shall be implemented in 64Bit.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="MemAcc64BitSupport"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="411d7b29-e70a-445d-8099-59434522ab75"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="MemAccCompareApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;This parameter enables/disables the function MemAcc_Compare().&lt;/p&gt;
                          &lt;p&gt;This function allows to compare data stored in a buffer with data stored in memory&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="LABEL" value="MemAccCompareApi"/>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="c0a030b1-97af-4f85-809a-a94b6224766f"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="MemAccDevErrorDetect" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;True  : Enable the Default Error Tracer (Det) detection.&lt;/p&gt;
                          &lt;p&gt;False : Disable the Default Error Tracer (Det) detection.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="AUTOSAR_ECUC"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="a7adac6b-277f-4779-9079-3c8f159e3a57"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
                <v:var name="MemAccVersionInfoApi" type="BOOLEAN">
                  <a:a name="DESC">
                    <a:v>&lt;html&gt;
                          &lt;p&gt;Enable/Disable the Pre-processor switch for version info API support.&lt;/p&gt;
                        &lt;/html&gt;</a:v>
                  </a:a>
                  <a:a name="IMPLEMENTATIONCONFIGCLASS" 
                       type="IMPLEMENTATIONCONFIGCLASS">
                    <icc:v vclass="PreCompile">VariantPreCompile</icc:v>
                  </a:a>
                  <a:a name="ORIGIN" value="Elektrobit Automotive GmbH"/>
                  <a:a name="SCOPE" value="LOCAL"/>
                  <a:a name="SYMBOLICNAMEVALUE" value="false"/>
                  <a:a name="UUID" value="0059f393-90bd-42b5-b06a-f038c70fc838"/>
                  <a:da name="DEFAULT" value="false"/>
                </v:var>
              </v:ctr>
              <d:ref type="REFINED_MODULE_DEF" 
                     value="ASPath:/AUTOSAR/EcucDefs/MemAcc"/>
            </v:ctr>
          </d:chc>
        </d:lst>
      </d:ctr>
    </d:lst>
  </d:ctr>

</datamodel>

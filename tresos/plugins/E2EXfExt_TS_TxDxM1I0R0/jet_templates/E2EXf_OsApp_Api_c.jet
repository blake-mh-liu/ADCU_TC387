<%@ jet package="eb.tresos.e2exf.generated.jet" class="E2EXf_OsApp_Api_c" skeleton="File.skeleton"
        imports="
                java.util.Collection
                eb.tresos.e2exf.generator.intermediate.Model
                eb.tresos.e2exf.generator.intermediate.Profile
                eb.tresos.e2exf.generator.intermediate.transformations.E2EXfTransformationFunction
                eb.tresos.e2exf.generator.intermediate.GeneratorPartitionHandler
                eb.tresos.e2exf.generator.output.ConfigDataDefinitionCreator
                eb.tresos.e2exf.generator.output.FileGeneratorHelper
                eb.tresos.e2exf.generator.output.FunctionDefinitionCreator
                eb.tresos.e2exf.generator.output.InitFunctionDefinitionCreator
                "
%>
<%
    JavaGenContext context = null;
    try {
        context = JavaGenContext.get( argument, stringBuffer );
    } catch( IOException e ) {
        e.printStackTrace();
        return "";
    }
    final Model model = (Model)context.gen.getVariable( Model.ARG_NAME, Model.class, null );
    final Collection<Profile> configuredProfiles = model.getConfiguredProfiles();
    final GeneratorPartitionHandler partitionHandler = model.getGeneratorPartitionHandler();
    final String memSecInfix = partitionHandler.getPartitionInfix().toUpperCase();
%>
<%@ include file="head.c.inc" %>

/*==================[includes]==============================================*/

#include <E2E_SM.h>              /* E2E State Machine */
<%for(Profile profile : configuredProfiles) {
    if(!model.getTransformersWithProfile(profile).isEmpty()) {
%>
#include <E2E_<%= profile.getMappedName() %>.h>             /* E2E Profile <%= profile.getMappedName() %> */
<% } } %>
#include <E2E_E2EXf_Stc.h>           /* Static definitions of constants and types */
#include <E2EXf<%= partitionHandler.getPartitionInfix() %>_PartitionApi.h>       /* Generated partition API */

/*==================[macros]================================================*/

#if (defined E2EXF_EB_PARTITION_INITFUNC_NAME) /* to prevent double declaration */
#error E2EXF_EB_PARTITION_INITFUNC_NAME already defined
#endif /* if (defined E2EXF_EB_PARTITION_INITFUNC_NAME) */

#define E2EXF_EB_PARTITION_INITFUNC_NAME E2EXf<%= partitionHandler.getPartitionInfix() %>_PartitionInit

#if (defined E2EXF_EB_PARTITION_DEINITFUNC_NAME) /* to prevent double declaration */
#error E2EXF_EB_PARTITION_DEINITFUNC_NAME already defined
#endif /* if (defined E2EXF_EB_PARTITION_DEINITFUNC_NAME) */

#define E2EXF_EB_PARTITION_DEINITFUNC_NAME E2EXf<%= partitionHandler.getPartitionInfix() %>_PartitionDeInit

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

/*==================[internal function declarations]========================*/

/*==================[external constants]====================================*/

/*==================[internal constants]====================================*/

/*==================[external data]=========================================*/

/*==================[internal data]=========================================*/
<%= FileGeneratorHelper.getStateVariableMemorySection(configuredProfiles, partitionHandler, NL) %>
#define E2EXF<%= memSecInfix %>_START_SEC_VAR_INIT_ASIL_D_8
#include <E2EXf_MemMap.h>

/** \brief Define variable holding the initialization state of a dedicated partition */
E2EXF_DEF_VAR_PARTITIONINITSTATE;

#define E2EXF<%= memSecInfix %>_STOP_SEC_VAR_INIT_ASIL_D_8
#include <E2EXf_MemMap.h>

#define E2EXF_START_SEC_CONFIG_DATA_UNSPECIFIED
#include <E2EXf_MemMap.h>

<% for(Profile profile : configuredProfiles)
   {
     for (final E2EXfTransformationFunction transformer : model.getTransformersWithProfile(profile))
     {
%>
<%= transformer.accept(new ConfigDataDefinitionCreator(NL)) %>
<%
     }
   }
%>
<% 
   for (final E2EXfTransformationFunction transformer : model.getTransformersWithDisabledEndToEndCheck())
   {
%>
<%= transformer.accept(new ConfigDataDefinitionCreator(NL)) %>
<% }%>
#define E2EXF_STOP_SEC_CONFIG_DATA_UNSPECIFIED
#include <E2EXf_MemMap.h>

/*==================[external function definitions]=========================*/

#define E2EXF_START_SEC_CODE
#include <E2EXf_MemMap.h>

/** \brief Define initialization function for all transformers of this partition */
E2EXF_DEF_FUNC_PARTITIONINIT_START
<% for(Profile profile : configuredProfiles)
   {
     for (final E2EXfTransformationFunction transformer : model.getTransformersWithProfile(profile))
     {
       final StringBuilder initFunctionDefinition = transformer.accept(new InitFunctionDefinitionCreator(NL));
       if(!initFunctionDefinition.toString().isEmpty())
       {
%>
<%= initFunctionDefinition %>
<%
       }
     }
   }
%>
E2EXF_DEF_FUNC_PARTITIONINIT_STOP

/** \brief Define de-initialization function for all transformers of this partition */
E2EXF_DEF_FUNC_PARTITIONDEINIT

<% for(Profile profile : configuredProfiles)
   {

     for (final E2EXfTransformationFunction transformer : model.getTransformersWithProfile(profile))
     {
       final StringBuilder functionDefinition = transformer.accept(new FunctionDefinitionCreator(partitionHandler.getAllTransformers(), NL));
       if(!functionDefinition.toString().isEmpty())
       {
%>
<%= functionDefinition %>

<%
       }
     }
   }
%>
<%
    for (final E2EXfTransformationFunction transformer : model.getTransformersWithDisabledEndToEndCheck())
    {
      final StringBuilder functionDefinition = transformer.accept(new FunctionDefinitionCreator(partitionHandler.getAllTransformers(), NL));
      if(!functionDefinition.toString().isEmpty())
      {
%>
<%= functionDefinition %>

<%
      }
    }
%>
#define E2EXF_STOP_SEC_CODE
#include <E2EXf_MemMap.h>

/*==================[internal function definitions]=========================*/

<%@ include file="foot.c.inc" %>
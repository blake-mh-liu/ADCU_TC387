<%@ jet package="eb.tresos.e2exf.generated.jet" class="E2EXf_OsApp_Api_h" skeleton="File.skeleton"
        imports="
                java.util.Collection
                eb.tresos.e2exf.generator.intermediate.Model
                eb.tresos.e2exf.generator.intermediate.Profile
                eb.tresos.e2exf.generator.intermediate.transformations.E2EXfTransformationFunction
                eb.tresos.e2exf.generator.intermediate.GeneratorPartitionHandler
                eb.tresos.e2exf.generator.output.FunctionDeclarationCreator
                import java.util.ArrayList
                "
%>
<%
    JavaGenContext context = null;
    try {
        context = JavaGenContext.get( argument, stringBuffer );
    } catch( IOException e ) {
        e.printStackTrace();
        return "";
    }

    final String includeGuardName = getIncludeGuardName( context );
    final Model model = (Model)context.gen.getVariable( Model.ARG_NAME, Model.class, null );
    final GeneratorPartitionHandler partitionHandler = model.getGeneratorPartitionHandler();
    final Collection<Profile> supportedProfiles = model.getConfiguredProfiles();
%>
<%@ include file="head.h.inc" %>

/*==================[includes]==============================================*/

#include <Std_Types.h>         /* AUTOSAR standard types */
#include <TransformerTypes.h>  /* Transformer specific standard types **/
<% if(!model.getTransformersWithDisabledEndToEndCheck().isEmpty())
   {
%>
#include <E2E_No_Check_E2EXf.h>  /* Profile independent definitions of functions and types */
<%
   }
%>
<% for(Profile profile : supportedProfiles)
   {
     if(!model.getTransformersWithProfile(profile).isEmpty())
     {
%>
#include <E2E_<%= profile.getMappedName() %>_E2EXf.h>  /* Profile specific definitions of functions and types */
<%
     } 
   }
%>

/*==================[macros]================================================*/

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define E2EXF_START_SEC_CODE
#include <E2EXf_MemMap.h>

/**
 ** \brief Initializes the state of a partition of the E2E Transformer.
 **
 ** This function initializes the E2E library state structures, which is done by calling
 ** init-functions from all configured partitions.
 **
 ** \Reentrancy{Re-entrant}
 ** \Synchronicity{Synchronous}
 **/
E2EXF_DECL_FUNC_PARTITIONINIT(<%= partitionHandler.getPartitionInfix() %>_);

/**
 ** \brief Deinitializes the state of a partition of the E2E Transformer.
 **
 ** \Reentrancy{Re-entrant}
 ** \Synchronicity{Synchronous}
 **/
E2EXF_DECL_FUNC_PARTITIONDEINIT(<%= partitionHandler.getPartitionInfix() %>_);

<%
Collection<E2EXfTransformationFunction> transformers = new ArrayList<>();
for(Profile profile : supportedProfiles)
{
  transformers.addAll(model.getTransformersWithProfile(profile));
}
transformers.addAll(model.getTransformersWithDisabledEndToEndCheck());
for (final E2EXfTransformationFunction transformer : transformers)
{
  final StringBuilder functionDeclaration = transformer.accept(new FunctionDeclarationCreator(partitionHandler.getAllTransformers(), NL));
  if(!functionDeclaration.toString().isEmpty())
  {
%>
<%= functionDeclaration %>
<%
  }
}
%>
#define E2EXF_STOP_SEC_CODE
#include <E2EXf_MemMap.h>

/*==================[internal function declarations]========================*/

/*==================[external constants]====================================*/

/*==================[internal constants]====================================*/

/*==================[external data]=========================================*/

/*==================[internal data]=========================================*/

/*==================[external function definitions]=========================*/

/*==================[internal function definitions]=========================*/

<%@ include file="foot.h.inc" %>
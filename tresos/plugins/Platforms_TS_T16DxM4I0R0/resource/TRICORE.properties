# Atomic access to base datatypes
Basetypes.char.AtomicAccess:true
Basetypes.short.AtomicAccess:true
Basetypes.int.AtomicAccess:true
Basetypes.long.AtomicAccess:true
Basetypes.float.AtomicAccess:true
Basetypes.double.AtomicAccess:false
Basetypes.long\ long.AtomicAccess:false

# Size of base datatypes
Basetypes.char.Size:1
Basetypes.short.Size:2
Basetypes.int.Size:4
Basetypes.long.Size:4
Basetypes.float.Size:4
Basetypes.double.Size:8
Basetypes.long\ long.Size:8
Basetypes.farpointer.Size:4
Basetypes.nearpointer.Size:4

# Alignment requirements of base datatypes
Basetypes.char.Alignment:1
Basetypes.short.Alignment:2
Basetypes.int.Alignment:4
Basetypes.long.Alignment:4
Basetypes.float.Alignment:4
Basetypes.double.Alignment:4
Basetypes.long\ long.Alignment:8
Basetypes.farpointer.Alignment:4
Basetypes.nearpointer.Alignment:4

# Alignment requirements of complex types
# Configure the minimum requirements for these types

# EB: struct.Alignment:1 is only used for struct with one char
# don't use 1 to avoid alignement traps for TriCore derivates
Complextypes.struct.Alignment:1->1,2->2,3->2,4->2,5->2,6->2,7->2,2
Complextypes.array.Alignment:1

# Mapping of base data types
Basetypes.boolean.Mapping:unsigned char
Basetypes.sint8.Mapping:signed char
Basetypes.sint16.Mapping:signed short
Basetypes.sint32.Mapping:signed long
Basetypes.sint64.Mapping:signed long long
Basetypes.uint8.Mapping:unsigned char
Basetypes.uint16.Mapping:unsigned short
Basetypes.uint32.Mapping:unsigned long
Basetypes.uint64.Mapping:unsigned long long

Basetypes.sint8_least.Mapping:signed long
Basetypes.sint16_least.Mapping:signed long
Basetypes.sint32_least.Mapping:signed long
Basetypes.sint64_least.Mapping:signed long long
Basetypes.uint8_least.Mapping:unsigned long
Basetypes.uint16_least.Mapping:unsigned long
Basetypes.uint32_least.Mapping:unsigned long
Basetypes.uint64_least.Mapping:unsigned long long

Basetypes.float32.Mapping:float
Basetypes.float64.Mapping:double

# Mapping of data type with most stringent alignment
# requirements
Derivedtypes.TS_MaxAlignedType.Mapping:double
 # CPU type and CPU endianness
Cpu.Type:32
Cpu.Byteorder:LE
Cpu.Bitorder:LE

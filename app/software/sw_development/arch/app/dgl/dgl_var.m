%===========$Update Time :  2025-08-28 20:44:39 $=========
disp('Loading $Id: dgl_var.m  2025-08-28 20:44:39    foxtron $      FVT_export_businfo_v2.0 2021-11-02')
%% Calibration Name, Units, Min, Max, Data Type, Comment
a2l_par('KDGL_bBusOffEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bComLostVcuEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bComInvaildVcuEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bPosSenrFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bTempSensrFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bCurrFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bSicTempFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bSicFltFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bHvDcVoltFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bEOPFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bPCBTempFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bOilTempFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bWaterTempFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bKL30FaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bIGNVoltFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bPREREGFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bVCC5VFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bVREF5VFaultEna_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_tiDlyOnOverTqProt_C', 	'cnt',    0,    5000,    'single',    '');
a2l_par('KDGL_tiDlyOffOverTqProt_C', 	'cnt',    0,    5000,    'single',    '');
a2l_par('KDGL_tiDlyOnStallProt_C', 	'cnt',    0,    5000,    'single',    '');
a2l_par('KDGL_bRstStallPort_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_tiDlyOnEOP_C', 	'cnt',    0,    5000,    'single',    '');
a2l_par('KDGL_tiDlyOffEOP_C', 	'C',    0,    5000,    'single',    '');
a2l_par('KDGL_nRotStallProtEna_rpm', 	'rpm',    0,    10000,    'single',    '');
a2l_par('KDGL_tqMotStallProtEna_Nm', 	'Nm',    0,    10000,    'single',    '');
a2l_par('KDGL_iMotStallProtEna_A', 	'A',    0,    10000,    'single',    '');
a2l_par('KDGL_nEOPSpdDiff_rpm', 	'rpm',    0,    10000,    'single',    '');
a2l_par('KDGL_OverSpdNotEna_rpm', 	'rpm',    0,    22000,    'single',    '');
a2l_par('KDGL_OverSpd_rpm', 	'rpm',    0,    22000,    'single',    '');
a2l_par('KDGL_OverSpdHysBand_rpm', 	'rpm',    0,    22000,    'single',    '');
a2l_par('KDGL_OverSpdHeal_cnt', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_OverSpdErr_cnt', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_SpdOverCoefAddStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('KDGL_SpdOverCoefSubStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('KDGL_IGBTStartDerat_C', 	'degC',    -200,    200,    'single',    '');
a2l_par('KDGL_IGBTHysBand_C', 	'degC',    -200,    200,    'single',    '');
a2l_par('KDGL_IGBTStopDerat_C', 	'degC',    -200,    200,    'single',    '');
a2l_par('KDGL_IGBTCoefDepStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('KDGL_IGBTCoefAddStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('KDGL_TempIGBTWarningHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_TempIGBTWarningErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_TempIGBTFaultHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_TempIGBTFaultErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_MotStartDerat_C', 	'degC',    -300,    300,    'single',    '');
a2l_par('KDGL_TempMotWarningHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_TempMotWarningErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_MotStopDerat_C', 	'degC',    -300,    300,    'single',    '');
a2l_par('KDGL_MotHysBand_C', 	'degC',    -300,    300,    'single',    '');
a2l_par('KDGL_TempMotFaultHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_TempMotFaultErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_MotCoefDepStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('KDGL_MotCoefAddStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('KDGL_PCBStartDerat_C', 	'degC',    -200,    200,    'single',    '');
a2l_par('KDGL_TempPCBWarningHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_TempPCBWarningErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_PCBStopDerat_C', 	'degC',    -200,    200,    'single',    '');
a2l_par('KDGL_TempPCBFaultHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_TempPCBFaultErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_PCBHysBand_C', 	'degC',    -200,    200,    'single',    '');
a2l_par('KDGL_PCBCoefDepStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('KDGL_PCBCoefAddStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('KDGL_OilStartDerat_C', 	'degC',    -200,    200,    'single',    '');
a2l_par('KDGL_TempOilWarningHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_TempOilWarningErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_OilStopDerat_C', 	'degC',    -200,    200,    'single',    '');
a2l_par('KDGL_TempOilFaultHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_TempOilFaultErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('KDGL_OilHysBand_C', 	'degC',    -200,    200,    'single',    '');
a2l_par('KDGL_OilCoefDepStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('KDGL_OilCoefAddStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('Diag2_f32_UdcOverStopDerat_C', 	'V',    -2000,    2000,    'single',    '');
a2l_par('Diag2_int16_HvOverErrHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('Diag2_int16_HvOverErrErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('Diag2_f32_UdcOverStartDerat_C', 	'V',    -2000,    2000,    'single',    '');
a2l_par('Diag2_int16_HvOverWarnHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('Diag2_int16_HvOverWarnErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('Diag2_f32_UdcOverHysBand_C', 	'V',    -2000,    2000,    'single',    '');
a2l_par('Diag2_f32_UdcOverCoefDepStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('Diag2_f32_UdcOverCoefAddStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('Diag2_f32_UdcLowStopDerat_C', 	'V',    -2000,    2000,    'single',    '');
a2l_par('Diag2_int16_HvLowErrHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('Diag2_int16_HvLowErrErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('Diag2_f32_UdcLowStartDerat_C', 	'V',    -2000,    2000,    'single',    '');
a2l_par('Diag2_int16_HvLowWarnHeal_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('Diag2_int16_HvLowWarnErr_C', 	'cnt',    -250,    250,    'int16',    '');
a2l_par('Diag2_f32_UdcLowHysBand_C', 	'V',    -2000,    2000,    'single',    '');
a2l_par('Diag2_f32_UdcLowCoefDepStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('Diag2_f32_UdcLowCoefAddStep_C', 	'cnt',    0,    1,    'single',    '');
a2l_par('KDGL_OverTorque_flg_ovrdflg', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_OverTorque_flg_ovrdval', 	'flg',    0,    1,    'boolean',    '');
a2l_par('DiagM_bZeroCurrTrig_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('DiagM_bZeroCurrMor_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('DiagM_Fault2LevelTrig_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('DiagM_Fault2LevelMor_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('Diag2_bRstFault_C', 	'flg',    0,    1,    'boolean',    '');
a2l_par('KDGL_bEnaBenchShutDwn_C', 	'flg',    0,    1,    'boolean',    '');

%% Monitored Signals
% Internal Signals %
a2l_mon('VDGL_DiagOverTrq_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_DiagStall_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_DiagEOPSpdDiff_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_OverSpdErr_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_OverSpdDerateCoef_gain', 	'gain',    0,    1,    'single',    '');
a2l_mon('VDGL_TempIGBTWarning_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_TempIGBTFault_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_IGBTDerateCoef_gain', 	'gain',    0,    1,    'single',    '');
a2l_mon('VDGL_TempMotWarning_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_TempMotFault_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_MotDerateCoef_gain', 	'gain',    0,    1,    'single',    '');
a2l_mon('VDGL_TempPCBWarning_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_TempPCBFault_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_PCBDerateCoef_gain', 	'gain',    0,    1,    'single',    '');
a2l_mon('VDGL_TempOilWarning_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_TempOilFault_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_OilDerateCoef_gain', 	'gain',    0,    1,    'single',    '');
a2l_mon('VDGL_HVOverErr_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_HVOverWarn_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_UdcOverDerateCoef_gain', 	'gain',    0,    1,    'single',    '');
a2l_mon('VDGL_HVLowErr_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_HVLowWarn_flg', 	'flg',    0,    1,    'boolean',    '');
a2l_mon('VDGL_UdcLowDerateCoef_gain', 	'gain',    0,    1,    'single',    '');

%% Outputs Signals
% Outputs Signals %
